import React, { useEffect, useState } from "react";
import { Flex, Text, Heading, Button } from "@radix-ui/themes";
import axios from "axios";

const PlaylistCard = () => {
  const [recommended, setRecommended] = useState([]);
  const [token, setToken] = useState("");
  const [playlist, setPlaylist] = useState([]);
  const user_id = window.localStorage.getItem("user_id");
  const top_artist_id = window.localStorage.getItem("top_artist");
  const top_genre = window.localStorage.getItem("top_genre");
  const [playlistCreated, setPlaylistCreated] = useState(false);
  const playlist_id = window.localStorage.getItem("playlist_id");
  const savedURI = window.localStorage.getItem("savedURI");

  //create a playlist
  const createPlaylist = (token) => {
    if (playlistCreated === true) {
      console.log("Playlist already created");
      return;
    }

    axios
      .post(
        `https://api.spotify.com/v1/users/${user_id}/playlists`,
        {
          name: `Waavify - ${top_genre}`,
          description: "A playlist generated by Waavify",
          public: false,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      )
      .then((response) => {
        setPlaylist(response?.data?.id);
        window.localStorage.setItem("playlist_id", response?.data?.id);
        setPlaylistCreated(true);
        console.log("Playlist created:", response?.data?.id);
      })
      .catch((error) => {
        console.log(error);
      });
  };

  //add items to playlist
  const addItemsToPlaylist = (token) => {};

  // handle button click
  const handleButtonClick = () => {
    if (playlistCreated === false) {
      window.localStorage.setItem("savedURI", getURIs().join(","));
      console.log(playlist);
      createPlaylist(token);
      setPlaylistCreated(false);
      // addItemsToPlaylist(token);
      console.log("Playlist created");
      console.log(savedURI);
      // console.log(getURIs());

      // const urlToOpen = "";
    } else {
      console.log("Playlist already created");
    }
  };

  //get URI of recommended tracks
  const getURIs = () => {
    return recommended?.tracks?.map((track) => track?.uri) || [];
    //save to local storage
  };

  useEffect(() => {
    const RECOMMENDED_ENDPOINT = `https://api.spotify.com/v1/recommendations?limit=10&market=GH&seed_genres=afrobeat&seed_tracks=${top_artist_id}`;
    const hash = window.location.hash;
    const token = hash.substring(1).split("&")[0].split("=")[1];

    if (token) {
      //get spotify recommended tracks
      const fetchRecommended = (token) => {
        axios
          .get(RECOMMENDED_ENDPOINT, {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/x-www-form-urlencoded",
            },
          })
          .then((response) => {
            setRecommended(response?.data);
            // console.log(recommended);
          })
          .catch((error) => {
            console.log(error);
          });
      };
      //
      //
      window.localStorage.setItem("token", token);
      setToken(token);
      fetchRecommended(token);
    } else null;
  }, [token]);

  // Use useEffect to log the recommended data when it changes
  //

  return (
    <>
      <Flex className="playlist-card" direction="column" gap="5">
        <Flex
          className="song-dets no-bg"
          gap="5"
          direction={{
            initial: "column",
            md: "row",
            sm: "row",
            xl: "row",
          }}
          justify="space-between"
          align="center"
          width="100%"
        >
          <Text className="song-title no-bg" size="2">
            Some song recommendations
          </Text>
          <Button
            variant="solid"
            radius="full"
            color="#ffffff"
            size="2"
            className="small-button"
            onClick={handleButtonClick}
          >
            Save this playlist
          </Button>
        </Flex>
      </Flex>
    </>
  );
};

export default PlaylistCard;
